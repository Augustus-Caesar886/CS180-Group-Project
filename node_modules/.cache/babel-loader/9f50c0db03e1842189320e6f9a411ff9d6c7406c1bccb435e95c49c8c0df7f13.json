{"ast":null,"code":"var _jsxFileName = \"/Users/arleenkaur/CS180/CS180-Group-Project/src/quizMenuPage.jsx\",\n  _s = $RefreshSig$();\nimport { useLocation, useNavigate } from 'react-router-dom'; // allows changing pages\nimport React, { useState } from 'react'; // core react library and usestate to manage state, like which question user is on\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction QuizMenuPage() {\n  _s();\n  var _location$state;\n  // functional component\n  const location = useLocation(); // returns location object of current page of app, used to access state passed from previous page\n  const navigate = useNavigate(); // used to go to a different page after quiz is completed, changes current route in app\n  const username = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.username) || 'Student'; // access username from location state, fallback value is 'Student'\n  // question list\n  const questions = [{\n    question: \"Favorite subject?\",\n    options: [\"Math\", \"Physics\", \"Chemistry\", \"Biology\", \"Writing\", \"Arts\"],\n    answer: null // initially null, will store user response\n  }, {\n    question: \"Do you prefer working alone or in a team?\",\n    options: [\"Alone\", \"In a team\", \"Both\"],\n    answer: null\n  }];\n  const majorOptions = [{\n    name: \"Mechanical Engineering\",\n    description: \"Mechanical Engineering focuses on the design and development of machines and mechanical systems.\",\n    careers: [\"Mechanical Engineer\", \"Product Designer\", \"Automotive Engineer\"]\n  }, {\n    name: \"Computer Engineering\",\n    description: \"Computer Engineering combines computer science and electrical engineering to design and develop computer systems and hardware-software integration.\",\n    careers: [\"Software Developer\", \"Embedded Systems Engineer\", \"Hardware Engineer\"]\n  }];\n\n  // set up state for tracking quiz state\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); // state variable to track which question the user is answering\n  const [answer, setAnswers] = useState(() => {\n    // runs function only when component loads\n    const saved = localStorage.getItem('quizAnswers'); // gets saved answers from local storage\n    return saved ? JSON.parse(saved) : Array(questions.length).fill(null); // if saved exists, convert json string into javascript array or initialize fresh array\n  });\n\n  // function called when user selects answer to update the state of the selected answer in the quiz when the user selects a different one\n  // called when radio button <input type=\"radio\"> is clicked\n  const handleAnswerChange = event => {\n    const newAnswers = [...answer]; // makes copy of answer array\n    newAnswers[currentQuestionIndex] = event.target.value; // updates the answer for the current question\n    setAnswers(newAnswers); // sets new answers array into the state so re-renders component to reflect current state\n    localStorage.setItem('quizAnswers', JSON.stringify(newAnswers)); // converts array to json string and saves in localStorage as quizAnswers\n  };\n\n  // handles moving to next question or finishing state\n  const handleNextQuestion = () => {\n    if (currentQuestionIndex < questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      const defaultMajor = majorOptions[0];\n      navigate('/result', {\n        state: {\n          username,\n          answers: answer,\n          major: defaultMajor\n        }\n      });\n    }\n  };\n  const currentQuestion = questions[currentQuestionIndex]; // retrieves question object corresponding to question index\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '2rem'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Welcome, \", username]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Engineering Major Quiz\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n      children: currentQuestion.question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), currentQuestion.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"radio\",\n        id: option,\n        name: \"answer\",\n        value: option,\n        checked: answer[currentQuestionIndex] === option,\n        onChange: handleAnswerChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: option,\n        children: option\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this), \" \"]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleNextQuestion,\n      children: [\" \", currentQuestionIndex < questions.length - 1 ? \"Next Question\" : \"Finish Quiz\", \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n_s(QuizMenuPage, \"wiKbkYXDYNAkYYL51/KO8EECWnw=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = QuizMenuPage;\nexport default QuizMenuPage;\nvar _c;\n$RefreshReg$(_c, \"QuizMenuPage\");","map":{"version":3,"names":["useLocation","useNavigate","React","useState","jsxDEV","_jsxDEV","QuizMenuPage","_s","_location$state","location","navigate","username","state","questions","question","options","answer","majorOptions","name","description","careers","currentQuestionIndex","setCurrentQuestionIndex","setAnswers","saved","localStorage","getItem","JSON","parse","Array","length","fill","handleAnswerChange","event","newAnswers","target","value","setItem","stringify","handleNextQuestion","defaultMajor","answers","major","currentQuestion","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","map","option","index","type","id","checked","onChange","htmlFor","onClick","_c","$RefreshReg$"],"sources":["/Users/arleenkaur/CS180/CS180-Group-Project/src/quizMenuPage.jsx"],"sourcesContent":["import { useLocation, useNavigate } from 'react-router-dom'; // allows changing pages\nimport React, { useState } from 'react' // core react library and usestate to manage state, like which question user is on\n\nfunction QuizMenuPage() { // functional component\n    const location = useLocation(); // returns location object of current page of app, used to access state passed from previous page\n    const navigate = useNavigate(); // used to go to a different page after quiz is completed, changes current route in app\n    const username = location.state?.username || 'Student'; // access username from location state, fallback value is 'Student'\n// question list\n    const questions = [\n        {\n        question: \"Favorite subject?\",\n        options: [\"Math\", \"Physics\", \"Chemistry\", \"Biology\", \"Writing\", \"Arts\"],\n        answer: null, // initially null, will store user response\n        },\n        {\n        question: \"Do you prefer working alone or in a team?\",\n        options: [\"Alone\", \"In a team\", \"Both\"],\n        answer: null\n        }\n    ];\n    const majorOptions = [\n        {\n          name: \"Mechanical Engineering\",\n          description: \"Mechanical Engineering focuses on the design and development of machines and mechanical systems.\",\n          careers: [\"Mechanical Engineer\", \"Product Designer\", \"Automotive Engineer\"]\n        },\n        {\n          name: \"Computer Engineering\",\n          description: \"Computer Engineering combines computer science and electrical engineering to design and develop computer systems and hardware-software integration.\",\n          careers: [\"Software Developer\", \"Embedded Systems Engineer\", \"Hardware Engineer\"]\n        }\n      ];\n\n    // set up state for tracking quiz state\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); // state variable to track which question the user is answering\n    const [answer, setAnswers] = useState(() => { // runs function only when component loads\n    const saved = localStorage.getItem('quizAnswers'); // gets saved answers from local storage\n    return saved ? JSON.parse(saved) : Array(questions.length).fill(null); // if saved exists, convert json string into javascript array or initialize fresh array\n    });\n\n    // function called when user selects answer to update the state of the selected answer in the quiz when the user selects a different one\n    // called when radio button <input type=\"radio\"> is clicked\n    const handleAnswerChange = (event) => {\n        const newAnswers = [...answer]; // makes copy of answer array\n        newAnswers[currentQuestionIndex] = event.target.value; // updates the answer for the current question\n        setAnswers(newAnswers); // sets new answers array into the state so re-renders component to reflect current state\n        localStorage.setItem('quizAnswers', JSON.stringify(newAnswers)); // converts array to json string and saves in localStorage as quizAnswers\n    }\n\n    // handles moving to next question or finishing state\n    const handleNextQuestion = () => {\n        if (currentQuestionIndex < questions.length - 1) {\n            setCurrentQuestionIndex(currentQuestionIndex + 1);\n        } else {\n            const defaultMajor = majorOptions[0]\n            \n            navigate('/result', {\n                state: {\n                    username,\n                    answers: answer,\n                    major: defaultMajor\n                }\n            });\n        }\n    };\n  const currentQuestion = questions[currentQuestionIndex]; // retrieves question object corresponding to question index\n\n  return (\n    <div style={{ padding: '2rem' }}>\n      <h2>Welcome, {username}</h2> {/* display greeting*/}\n      <h3>Engineering Major Quiz</h3> {/* display quiz title */}\n\n      {/* display current question */}\n      <p>{currentQuestion.question}</p>\n\n      {/* loop through options array to display answer choices*/}\n      {currentQuestion.options.map((option, index) => (\n        <div key={index}>\n          <input\n            type=\"radio\"\n            id={option}\n            name=\"answer\"\n            value={option}\n            checked={answer[currentQuestionIndex] === option}\n            onChange={handleAnswerChange}\n          />\n          <label htmlFor={option}>{option}</label> {/* display label for current option */}\n        </div>\n      ))}\n\n      <br />\n      <button onClick={handleNextQuestion}> {/* move to next question or finish quiz */}\n        {currentQuestionIndex < questions.length - 1 ? \"Next Question\" : \"Finish Quiz\"} {/* button text changes depending on question progrssion */}\n      </button>\n    </div>\n  );\n}\n\nexport default QuizMenuPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}