{"ast":null,"code":"var _jsxFileName = \"/Users/arleenkaur/CS180/CS180-Group-Project/src/quizResultPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom'; // allows changing pages\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction QuizResultsPage() {\n  _s();\n  var _location$state, _location$state2, _location$state3;\n  const location = useLocation();\n  const navigate = useNavigate();\n  const username = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.username) || 'Student'; // tries to get username from location state and defaults to student\n\n  // Make answers and major stateful so we can set them in useEffect\n  const [answers, setAnswers] = useState(((_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.answers) || []); // tries to get quiz answers from previous page's state\n  const [major, setMajor] = useState(((_location$state3 = location.state) === null || _location$state3 === void 0 ? void 0 : _location$state3.major) || null); // gets recommended major from state\n\n  useEffect(() => {\n    if ((!answers || answers.length === 0) && username) {\n      // if there are answers saves, so if the quiz has been taken\n      const storedAnswers = localStorage.getItem(`quizAnswers`); // get saved answers from localStorage\n      if (storedAnswers) {\n        // if there is data\n        const parsedAnswers = JSON.parse(storedAnswers); // parse from json string to javascript array\n        setAnswers(parsedAnswers); // update state with answers\n        setMajor(determineMajor(parsedAnswers)); // determine major\n      }\n    }\n  }, []);\n\n  // basic example logic, replace with your real logic later\n  function determineMajor(answers) {\n    const score = answers.reduce((acc, answer) => {\n      if (['Math', 'Physics'].includes(answer)) return acc + 1;\n      return acc;\n    }, 0);\n    if (score >= 2) {\n      return {\n        name: \"Computer Engineering\",\n        description: \"You enjoy logical thinking, math, and hardware/software systems.\",\n        careers: [\"Software Developer\", \"Embedded Systems Engineer\", \"Hardware Engineer\"]\n      };\n    } else {\n      return {\n        name: \"Mechanical Engineering\",\n        description: \"You enjoy building things and understanding mechanics.\",\n        careers: [\"Mechanical Engineer\", \"Product Designer\", \"Automotive Engineer\"]\n      };\n    }\n  }\n  const handleGoBack = () => {\n    navigate('/student', {\n      state: {\n        username\n      }\n    }); // sends user back to student menu\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '2rem'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Quiz Results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), !answers || answers.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"You haven't taken the quiz yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Thanks for completing the quiz, \", username, \"!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Your Answers:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: answers.map((answer, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Question \", index + 1, \": \", answer || 'No answer given']\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), major && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Recommended Major: \", major.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: major.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Career Paths:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: major.careers.map((career, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: career\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGoBack,\n        children: \"Back to Menu\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n_s(QuizResultsPage, \"KxadNh7MA7h2i71x14BMoYkvGOI=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = QuizResultsPage;\nexport default QuizResultsPage;\nvar _c;\n$RefreshReg$(_c, \"QuizResultsPage\");","map":{"version":3,"names":["React","useEffect","useState","useLocation","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","QuizResultsPage","_s","_location$state","_location$state2","_location$state3","location","navigate","username","state","answers","setAnswers","major","setMajor","length","storedAnswers","localStorage","getItem","parsedAnswers","JSON","parse","determineMajor","score","reduce","acc","answer","includes","name","description","careers","handleGoBack","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","career","idx","onClick","_c","$RefreshReg$"],"sources":["/Users/arleenkaur/CS180/CS180-Group-Project/src/quizResultPage.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom'; // allows changing pages\n\nfunction QuizResultsPage() {\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  const username = location.state?.username || 'Student'; // tries to get username from location state and defaults to student\n\n  // Make answers and major stateful so we can set them in useEffect\n  const [answers, setAnswers] = useState(location.state?.answers || []); // tries to get quiz answers from previous page's state\n  const [major, setMajor] = useState(location.state?.major || null); // gets recommended major from state\n\n  useEffect(() => {\n    if ((!answers || answers.length === 0) && username) { // if there are answers saves, so if the quiz has been taken\n      const storedAnswers = localStorage.getItem(`quizAnswers`); // get saved answers from localStorage\n      if (storedAnswers) { // if there is data\n        const parsedAnswers = JSON.parse(storedAnswers); // parse from json string to javascript array\n        setAnswers(parsedAnswers); // update state with answers\n        setMajor(determineMajor(parsedAnswers)); // determine major\n      }\n    }\n  }, []);\n\n  // basic example logic, replace with your real logic later\n  function determineMajor(answers) {\n    const score = answers.reduce((acc, answer) => {\n      if (['Math', 'Physics'].includes(answer)) return acc + 1;\n      return acc;\n    }, 0);\n\n    if (score >= 2) {\n      return {\n        name: \"Computer Engineering\",\n        description:\n          \"You enjoy logical thinking, math, and hardware/software systems.\",\n        careers: [\n          \"Software Developer\",\n          \"Embedded Systems Engineer\",\n          \"Hardware Engineer\",\n        ],\n      };\n    } else {\n      return {\n        name: \"Mechanical Engineering\",\n        description:\n          \"You enjoy building things and understanding mechanics.\",\n        careers: [\n          \"Mechanical Engineer\",\n          \"Product Designer\",\n          \"Automotive Engineer\",\n        ],\n      };\n    }\n  }\n\n  const handleGoBack = () => {\n    navigate('/student', { state: { username } }); // sends user back to student menu\n  };\n\n  return (\n    <div style={{ padding: '2rem' }}>\n      <h2>Quiz Results</h2>\n\n      {!answers || answers.length === 0 ? (\n        <p>You haven't taken the quiz yet.</p>\n      ) : (\n        <>\n          <p>Thanks for completing the quiz, {username}!</p>\n          <h3>Your Answers:</h3>\n          <ul>\n            {answers.map((answer, index) => (\n              <li key={index}>\n                Question {index + 1}: {answer || 'No answer given'}\n              </li>\n            ))}\n          </ul>\n\n          {major && (\n            <div>\n              <h3>Recommended Major: {major.name}</h3>\n              <p>{major.description}</p>\n              <strong>Career Paths:</strong>\n              <ul>\n                {major.careers.map((career, idx) => (\n                  <li key={idx}>{career}</li>\n                ))}\n              </ul>\n            </div>\n          )}\n\n          <br />\n          <button onClick={handleGoBack}>Back to Menu</button>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default QuizResultsPage;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE7D,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EAAA,IAAAC,eAAA,EAAAC,gBAAA,EAAAC,gBAAA;EACzB,MAAMC,QAAQ,GAAGX,WAAW,CAAC,CAAC;EAC9B,MAAMY,QAAQ,GAAGX,WAAW,CAAC,CAAC;EAE9B,MAAMY,QAAQ,GAAG,EAAAL,eAAA,GAAAG,QAAQ,CAACG,KAAK,cAAAN,eAAA,uBAAdA,eAAA,CAAgBK,QAAQ,KAAI,SAAS,CAAC,CAAC;;EAExD;EACA,MAAM,CAACE,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,EAAAU,gBAAA,GAAAE,QAAQ,CAACG,KAAK,cAAAL,gBAAA,uBAAdA,gBAAA,CAAgBM,OAAO,KAAI,EAAE,CAAC,CAAC,CAAC;EACvE,MAAM,CAACE,KAAK,EAAEC,QAAQ,CAAC,GAAGnB,QAAQ,CAAC,EAAAW,gBAAA,GAAAC,QAAQ,CAACG,KAAK,cAAAJ,gBAAA,uBAAdA,gBAAA,CAAgBO,KAAK,KAAI,IAAI,CAAC,CAAC,CAAC;;EAEnEnB,SAAS,CAAC,MAAM;IACd,IAAI,CAAC,CAACiB,OAAO,IAAIA,OAAO,CAACI,MAAM,KAAK,CAAC,KAAKN,QAAQ,EAAE;MAAE;MACpD,MAAMO,aAAa,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;MAC3D,IAAIF,aAAa,EAAE;QAAE;QACnB,MAAMG,aAAa,GAAGC,IAAI,CAACC,KAAK,CAACL,aAAa,CAAC,CAAC,CAAC;QACjDJ,UAAU,CAACO,aAAa,CAAC,CAAC,CAAC;QAC3BL,QAAQ,CAACQ,cAAc,CAACH,aAAa,CAAC,CAAC,CAAC,CAAC;MAC3C;IACF;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,SAASG,cAAcA,CAACX,OAAO,EAAE;IAC/B,MAAMY,KAAK,GAAGZ,OAAO,CAACa,MAAM,CAAC,CAACC,GAAG,EAAEC,MAAM,KAAK;MAC5C,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,CAACC,QAAQ,CAACD,MAAM,CAAC,EAAE,OAAOD,GAAG,GAAG,CAAC;MACxD,OAAOA,GAAG;IACZ,CAAC,EAAE,CAAC,CAAC;IAEL,IAAIF,KAAK,IAAI,CAAC,EAAE;MACd,OAAO;QACLK,IAAI,EAAE,sBAAsB;QAC5BC,WAAW,EACT,kEAAkE;QACpEC,OAAO,EAAE,CACP,oBAAoB,EACpB,2BAA2B,EAC3B,mBAAmB;MAEvB,CAAC;IACH,CAAC,MAAM;MACL,OAAO;QACLF,IAAI,EAAE,wBAAwB;QAC9BC,WAAW,EACT,wDAAwD;QAC1DC,OAAO,EAAE,CACP,qBAAqB,EACrB,kBAAkB,EAClB,qBAAqB;MAEzB,CAAC;IACH;EACF;EAEA,MAAMC,YAAY,GAAGA,CAAA,KAAM;IACzBvB,QAAQ,CAAC,UAAU,EAAE;MAAEE,KAAK,EAAE;QAAED;MAAS;IAAE,CAAC,CAAC,CAAC,CAAC;EACjD,CAAC;EAED,oBACEV,OAAA;IAAKiC,KAAK,EAAE;MAAEC,OAAO,EAAE;IAAO,CAAE;IAAAC,QAAA,gBAC9BnC,OAAA;MAAAmC,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAEpB,CAAC3B,OAAO,IAAIA,OAAO,CAACI,MAAM,KAAK,CAAC,gBAC/BhB,OAAA;MAAAmC,QAAA,EAAG;IAA+B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAEtCvC,OAAA,CAAAE,SAAA;MAAAiC,QAAA,gBACEnC,OAAA;QAAAmC,QAAA,GAAG,kCAAgC,EAACzB,QAAQ,EAAC,GAAC;MAAA;QAAA0B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAClDvC,OAAA;QAAAmC,QAAA,EAAI;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACtBvC,OAAA;QAAAmC,QAAA,EACGvB,OAAO,CAAC4B,GAAG,CAAC,CAACb,MAAM,EAAEc,KAAK,kBACzBzC,OAAA;UAAAmC,QAAA,GAAgB,WACL,EAACM,KAAK,GAAG,CAAC,EAAC,IAAE,EAACd,MAAM,IAAI,iBAAiB;QAAA,GAD3Cc,KAAK;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEV,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,EAEJzB,KAAK,iBACJd,OAAA;QAAAmC,QAAA,gBACEnC,OAAA;UAAAmC,QAAA,GAAI,qBAAmB,EAACrB,KAAK,CAACe,IAAI;QAAA;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACxCvC,OAAA;UAAAmC,QAAA,EAAIrB,KAAK,CAACgB;QAAW;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC1BvC,OAAA;UAAAmC,QAAA,EAAQ;QAAa;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAC9BvC,OAAA;UAAAmC,QAAA,EACGrB,KAAK,CAACiB,OAAO,CAACS,GAAG,CAAC,CAACE,MAAM,EAAEC,GAAG,kBAC7B3C,OAAA;YAAAmC,QAAA,EAAeO;UAAM,GAAZC,GAAG;YAAAP,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAc,CAC3B;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CACN,eAEDvC,OAAA;QAAAoC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACNvC,OAAA;QAAQ4C,OAAO,EAAEZ,YAAa;QAAAG,QAAA,EAAC;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA,eACpD,CACH;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACnC,EAAA,CA9FQD,eAAe;EAAA,QACLN,WAAW,EACXC,WAAW;AAAA;AAAA+C,EAAA,GAFrB1C,eAAe;AAgGxB,eAAeA,eAAe;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}